// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_POINTING_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define LOWER   1
#define RAISE   2

// https://zmk.dev/docs/development/hardware-integration/soft-off-setup?advanced-methods=wakeup&kscan-type=dkscan

/ {
    keys {
        compatible = "gpio-keys";

        soft_off_gpio_key: soft_off_gpio_key { gpios = <&gpio1 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; };
    };

    wakeup_scan: wakeup_scan {
        compatible = "zmk,kscan-gpio-direct";
        input-keys = <&soft_off_gpio_key>;
        wakeup-source;
    };

    side_band_behavior_triggers: side_band_behavior_triggers {
        compatible = "zmk,kscan-sideband-behaviors";
        kscan = <&wakeup_scan>;
        auto-enable;
        wakeup-source;
    };

    soft_off_wakers {
        compatible = "zmk,soft-off-wakeup-sources";
        wakeup-sources = <&wakeup_scan>;
    };
};

/ {
    // chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <RIG LEF>;
            then-layer = <TRI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y      &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp RET
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &kp LGUI  &mo 1  &kp SPACE    &kp SPACE  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            bindings = <
&kp ESC    &none  &kp N7  &kp N8    &kp N9  &kp PAGE_UP      &kp LG(LS(J))      &kp LC(LS(TAB))  &kp LC(TAB)  &none      &none  &kp DELETE
&kp LCTRL  &none  &kp N4  &kp N5    &kp N6  &kp PAGE_DOWN    &kp LEFT           &kp DOWN         &kp UP       &kp RIGHT  &none  &kp RET
&kp LSHFT  &none  &kp N1  &kp N2    &kp N3  &kp N0           &kp C_VOL_DN       &kp C_VOL_UP     &none        &none      &none  &kp LG(LSHFT)
                          &kp LGUI  &mo 1   &kp SPACE        &kp LG(LA(SPACE))  &mo 2            &kp RALT
            >;
        };

        raise_layer {
            bindings = <
&kp GRAVE  &kp EXCL  &kp AT          &kp POUND             &kp DOLLAR        &kp PERCENT      &kp CARET          &kp AMPS           &kp STAR               &kp PLUS         &kp EQUAL      &kp MINUS
&kp LCTRL  &none     &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp SQT          &kp DOUBLE_QUOTES  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp BACKSLASH  &kp RET
&kp LSHFT  &none     &none           &none                 &none             &none            &kp UNDER          &none              &none                  &none            &none          &kp RSHFT
                                     &kp LGUI              &mo 1             &kp LC(SPACE)    &kp SPACE          &mo 2              &kp RALT
            >;
        };
    };
};
